-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package pietc
@version 1.0.1


-- | The types for codels.
module Language.Piet.Codel
data Codel
AchromaticCodel :: Hue -> Lightness -> Codel
WhiteCodel :: Codel
BlackCodel :: Codel
data Hue
Red :: Hue
Yellow :: Hue
Green :: Hue
Cyan :: Hue
Blue :: Hue
Magenta :: Hue
data Lightness
Light :: Lightness
Normal :: Lightness
Dark :: Lightness
instance GHC.Classes.Ord Language.Piet.Codel.Codel
instance GHC.Classes.Eq Language.Piet.Codel.Codel
instance GHC.Show.Show Language.Piet.Codel.Codel
instance GHC.Enum.Enum Language.Piet.Codel.Lightness
instance GHC.Classes.Ord Language.Piet.Codel.Lightness
instance GHC.Classes.Eq Language.Piet.Codel.Lightness
instance GHC.Show.Show Language.Piet.Codel.Lightness
instance GHC.Enum.Enum Language.Piet.Codel.Hue
instance GHC.Classes.Ord Language.Piet.Codel.Hue
instance GHC.Classes.Eq Language.Piet.Codel.Hue
instance GHC.Show.Show Language.Piet.Codel.Hue

module Language.Piet.CompileOption

-- | The optimization level to optimize assembly code.
data OptimizationLevel

-- | <ul>
--   <li>O0</li>
--   </ul>
NoOptimization :: OptimizationLevel

-- | <ul>
--   <li>O1</li>
--   </ul>
OptimizationLevelLow :: OptimizationLevel

-- | <ul>
--   <li>O2</li>
--   </ul>
OptimizationLevelMiddle :: OptimizationLevel

-- | <ul>
--   <li>O3</li>
--   </ul>
OptimizationLevelHigh :: OptimizationLevel

-- | <ul>
--   <li>Os</li>
--   </ul>
SizeLevelLow :: OptimizationLevel

-- | <ul>
--   <li>Oz</li>
--   </ul>
SizeLevelHigh :: OptimizationLevel
instance GHC.Classes.Eq Language.Piet.CompileOption.OptimizationLevel
instance GHC.Show.Show Language.Piet.CompileOption.OptimizationLevel

module Language.Piet.Internal.CodelSize

-- | Guess the codel size of a given image.
guessCodelSize :: Eq a => (Int, Int) -> ((Int, Int) -> a) -> Int

module Language.Piet.Internal.Cyclic
cyclicSucc :: (Eq a, Enum a, Bounded a) => a -> a

module Language.Piet.Internal.Filler

-- | Fill all connected pixels in a given image and return an filled image
--   and a pixel map.
--   
--   The filled image is consists of component indices. The pixel map
--   contains coordinates of pixels which belong to a component whose index
--   is the key.
fillAll :: Eq a => Vector (Vector a) -> (Vector (Vector Int), IntMap [(Int, Int)])

module Language.Piet.Internal.Runtime
runtimeAssembly :: ByteString
declareFunctions :: MonadModuleBuilder m => m ()
resetStack :: MonadIRBuilder m => m ()
push :: MonadIRBuilder m => Int -> m ()
pop :: MonadIRBuilder m => m ()
add :: MonadIRBuilder m => m ()
subtract :: MonadIRBuilder m => m ()
multiply :: MonadIRBuilder m => m ()
divide :: MonadIRBuilder m => m ()
mod :: MonadIRBuilder m => m ()
not :: MonadIRBuilder m => m ()
greater :: MonadIRBuilder m => m ()
pointer :: MonadIRBuilder m => Operand -> m ()
switch :: MonadIRBuilder m => Operand -> m ()
duplicate :: MonadIRBuilder m => m ()
roll :: MonadIRBuilder m => m ()
inNumber :: MonadIRBuilder m => m ()
inChar :: MonadIRBuilder m => m ()
outNumber :: MonadIRBuilder m => m ()
outChar :: MonadIRBuilder m => m ()

module Language.Piet.Internal.LLVM
withLinkedModule :: OptimizationLevel -> Module -> (Module -> IO a) -> IO a
resolver :: IRCompileLayer l -> SymbolResolver
withHostDynamicJITTargetMachine :: (TargetMachine -> IO a) -> IO a

module Language.Piet.Internal.ToRGB8

-- | RGB8 convertible pixels and images.
class Pixel a => ToRGB8 a
toRGB8Pixel :: ToRGB8 a => a -> PixelRGB8
toRGB8Image :: ToRGB8 a => Image a -> Image PixelRGB8

-- | Convert a colored image to a RGB8Image.
toRGB8ImageM :: MonadError String m => DynamicImage -> m (Image PixelRGB8)
instance Language.Piet.Internal.ToRGB8.ToRGB8 Codec.Picture.Types.PixelRGB8
instance Language.Piet.Internal.ToRGB8.ToRGB8 Codec.Picture.Types.PixelRGB16
instance Language.Piet.Internal.ToRGB8.ToRGB8 Codec.Picture.Types.PixelRGBF
instance Language.Piet.Internal.ToRGB8.ToRGB8 Codec.Picture.Types.PixelRGBA8
instance Language.Piet.Internal.ToRGB8.ToRGB8 Codec.Picture.Types.PixelRGBA16
instance Language.Piet.Internal.ToRGB8.ToRGB8 Codec.Picture.Types.PixelCMYK8
instance Language.Piet.Internal.ToRGB8.ToRGB8 Codec.Picture.Types.PixelCMYK16
instance Language.Piet.Internal.ToRGB8.ToRGB8 Codec.Picture.Types.PixelYCbCr8


-- | Functions to read images.
module Language.Piet.ImageReader
data ImageReaderError

-- | The image file is unreadable.
ReadImageFileError :: String -> ImageReaderError

-- | The input image has an unsupported format.
UnsupportedImageError :: String -> ImageReaderError

-- | The specified size of codel is not fit for the image.
CodelSizeError :: ImageReaderError

-- | This type is to determine how to deal with additional colors such as
--   orange, gray, etc.
data AdditionalColorStrategy

-- | Treating as a white codel.
AdditionalColorAsWhite :: AdditionalColorStrategy

-- | Treating as a black codel.
AdditionalColorAsBlack :: AdditionalColorStrategy

-- | Treating as a codel which has the nearest color.
AdditionalColorNearest :: AdditionalColorStrategy

-- | This type is to determine how to deal with multicolored codels.
data MulticoloredCodelStrategy

-- | Treating as a white codel.
MulticoloredCodelAsWhite :: MulticoloredCodelStrategy

-- | Treating as a black codel.
MulticoloredCodelAsBlack :: MulticoloredCodelStrategy

-- | Picking up a center pixel.
MulticoloredCodelCenter :: MulticoloredCodelStrategy

-- | Finding the modal color, the most frequent color.
MulticoloredCodelModal :: MulticoloredCodelStrategy

-- | Calculating an average color.
MulticoloredCodelAverage :: MulticoloredCodelStrategy
data ImageConfig
ImageConfig :: AdditionalColorStrategy -> MulticoloredCodelStrategy -> CodelSize -> ImageConfig
[additionalColor] :: ImageConfig -> AdditionalColorStrategy
[multicoloredCodel] :: ImageConfig -> MulticoloredCodelStrategy
[codelSize] :: ImageConfig -> CodelSize
data CodelSize
CodelSize :: Int -> CodelSize
GuessCodelSize :: CodelSize

-- | Read an image and then convert to codels.
readCodels :: (MonadIO m, MonadError ImageReaderError m) => ImageConfig -> FilePath -> m (Vector (Vector Codel))

-- | Convert an image to codels.
imageToCodels :: MonadError ImageReaderError m => ImageConfig -> DynamicImage -> m (Vector (Vector Codel))

-- | Convert an image to codels. This function accepts only images in RGB8
--   format.
rgbImageToCodels :: MonadError ImageReaderError m => ImageConfig -> Image PixelRGB8 -> m (Vector (Vector Codel))
instance GHC.Classes.Eq Language.Piet.ImageReader.ImageConfig
instance GHC.Show.Show Language.Piet.ImageReader.ImageConfig
instance GHC.Classes.Eq Language.Piet.ImageReader.CodelSize
instance GHC.Show.Show Language.Piet.ImageReader.CodelSize
instance GHC.Classes.Ord Language.Piet.ImageReader.MulticoloredCodelStrategy
instance GHC.Classes.Eq Language.Piet.ImageReader.MulticoloredCodelStrategy
instance GHC.Show.Show Language.Piet.ImageReader.MulticoloredCodelStrategy
instance GHC.Classes.Ord Language.Piet.ImageReader.AdditionalColorStrategy
instance GHC.Classes.Eq Language.Piet.ImageReader.AdditionalColorStrategy
instance GHC.Show.Show Language.Piet.ImageReader.AdditionalColorStrategy
instance GHC.Classes.Eq Language.Piet.ImageReader.ImageReaderError
instance GHC.Show.Show Language.Piet.ImageReader.ImageReaderError


-- | Functions to run programs on JIT.
module Language.Piet.JITRunner

-- | Run programs on just-in-time compilation.
runJIT :: OptimizationLevel -> Module -> IO ()


-- | Functions to generate executables.
module Language.Piet.ObjectGenerator
data ObjectGeneratorError

-- | Failed to compile.
CompileError :: String -> ObjectGeneratorError

-- | Failed to link object.
LinkError :: String -> ObjectGeneratorError

-- | Failed to create a temporary file.
TempFileError :: String -> ObjectGeneratorError

-- | Generate an executable from an AST and write to a file in the
--   specified path.
generateExecutable :: (MonadIO m, MonadError ObjectGeneratorError m) => OptimizationLevel -> FilePath -> Module -> m ()

-- | Generate an executable from an AST.
generateObject :: (MonadIO m, MonadError ObjectGeneratorError m) => OptimizationLevel -> Module -> m ByteString
instance GHC.Classes.Eq Language.Piet.ObjectGenerator.ObjectGeneratorError
instance GHC.Show.Show Language.Piet.ObjectGenerator.ObjectGeneratorError


-- | A representation of the syntax of Piet.
module Language.Piet.Syntax

-- | A representation of a codel block. This has information how to move
--   into the next codel block.
newtype Block
Block :: Map DPCC NextBlock -> Block
[nextBlockTable] :: Block -> Map DPCC NextBlock

-- | A representation of the syntax of Piet.
--   
--   <a>SyntaxGraph</a> has a graph structure whose nodes represent codel
--   blocks and edges represent the next steps.
data SyntaxGraph
SyntaxGraph :: Int -> DPCC -> IntMap Block -> SyntaxGraph
[_initialBlockIndex] :: SyntaxGraph -> Int
[_initialDPCC] :: SyntaxGraph -> DPCC
[_blockMap] :: SyntaxGraph -> IntMap Block
EmptySyntaxGraph :: SyntaxGraph

-- | A data type which contains information about a move to the next block.
data NextBlock
NextBlock :: Command -> DPCC -> Int -> NextBlock

-- | The command which will be executed when moving into the next codel
--   block.
[_command] :: NextBlock -> Command

-- | The DP and CC which will be used in the next codel block.
[_dpcc] :: NextBlock -> DPCC

-- | The index of the next codel block.
[_blockIndex] :: NextBlock -> Int
ExitProgram :: NextBlock
data DirectionPointer
DPRight :: DirectionPointer
DPDown :: DirectionPointer
DPLeft :: DirectionPointer
DPUp :: DirectionPointer
data CodelChooser
CCLeft :: CodelChooser
CCRight :: CodelChooser
data DPCC
DPCC :: DirectionPointer -> CodelChooser -> DPCC
[getDP] :: DPCC -> DirectionPointer
[getCC] :: DPCC -> CodelChooser
data Command
NoOperation :: Command
Push :: Int -> Command
Pop :: Command
Add :: Command
Subtract :: Command
Multiply :: Command
Divide :: Command
Mod :: Command
Not :: Command
Greater :: Command
Pointer :: Command
Switch :: Command
Duplicate :: Command
Roll :: Command
InNumber :: Command
InChar :: Command
OutNumber :: Command
OutChar :: Command
commandFromTransition :: (Hue, Lightness) -> (Hue, Lightness) -> Int -> Command
showCommand :: Command -> String
showDPCC :: DPCC -> String
instance GHC.Classes.Eq Language.Piet.Syntax.SyntaxGraph
instance GHC.Show.Show Language.Piet.Syntax.SyntaxGraph
instance GHC.Classes.Eq Language.Piet.Syntax.Block
instance GHC.Show.Show Language.Piet.Syntax.Block
instance GHC.Classes.Eq Language.Piet.Syntax.NextBlock
instance GHC.Show.Show Language.Piet.Syntax.NextBlock
instance GHC.Classes.Eq Language.Piet.Syntax.Command
instance GHC.Show.Show Language.Piet.Syntax.Command
instance GHC.Classes.Ord Language.Piet.Syntax.DPCC
instance GHC.Classes.Eq Language.Piet.Syntax.DPCC
instance GHC.Show.Show Language.Piet.Syntax.DPCC
instance GHC.Enum.Bounded Language.Piet.Syntax.CodelChooser
instance GHC.Enum.Enum Language.Piet.Syntax.CodelChooser
instance GHC.Classes.Ord Language.Piet.Syntax.CodelChooser
instance GHC.Classes.Eq Language.Piet.Syntax.CodelChooser
instance GHC.Show.Show Language.Piet.Syntax.CodelChooser
instance GHC.Enum.Bounded Language.Piet.Syntax.DirectionPointer
instance GHC.Enum.Enum Language.Piet.Syntax.DirectionPointer
instance GHC.Classes.Ord Language.Piet.Syntax.DirectionPointer
instance GHC.Classes.Eq Language.Piet.Syntax.DirectionPointer
instance GHC.Show.Show Language.Piet.Syntax.DirectionPointer

module Language.Piet.Internal.Position
move :: Enum a => DirectionPointer -> (a, a) -> (a, a)

module Language.Piet.Internal.WhiteCodelSlider

-- | Move on white codels and return <a>NextBlock</a>.
slideOnWhiteBlock :: Vector (Vector (Codel, Int)) -> (Int, Int) -> DPCC -> NextBlock


-- | Functions to parse images.
module Language.Piet.Parser
data ParserError

-- | The block table is empty.
EmptyBlockTableError :: ParserError

-- | The initial codel of the block table is black.
IllegalInitialColorError :: ParserError

-- | A codel index in the codel table is missing.
MissingCodelIndexError :: Int -> ParserError

-- | Parse codels into a <a>SyntaxGraph</a>.
parse :: MonadError ParserError m => Vector (Vector Codel) -> m SyntaxGraph

-- | Parse a filled image which is returned by <a>fillAll</a> into a
--   <a>SyntaxGraph</a>.
parseFilledImage :: MonadError ParserError m => (Vector (Vector (Codel, Int)), IntMap [(Int, Int)]) -> m SyntaxGraph
instance GHC.Classes.Eq Language.Piet.Parser.ParserError
instance GHC.Show.Show Language.Piet.Parser.ParserError

module Language.Piet.Internal.DPCC

-- | Get a map containing a key DPCC that references DPCCs which will be
--   switched to the key in the next step. The first argument is possible
--   DPCCs to move to next blocks.
--   
--   When given <tt>[(DPRight, CCLeft), (DPUp, CCLeft)]</tt>, only
--   <tt>(DPRight, CCLeft)</tt> and <tt>(DPRight, CCRight)</tt> in the
--   current step will be switched to <tt>(DPRight, CCLeft)</tt> in the
--   next step.
dpccsToBackwardDPCCTable :: [DPCC] -> Map DPCC [DPCC]


-- | Functions to generate assembly code from <a>SyntaxGraph</a>.
module Language.Piet.AssemblyGenerator

-- | Generate an AST from a <a>SyntaxGraph</a>.
generateAssembly :: SyntaxGraph -> Module


-- | A visualization tool for <a>SyntaxGraph</a>.
module Language.Piet.SyntaxVisualizer

-- | Convert a <a>SyntaxGraph</a> to a DOT script, which describes graphs.
--   
--   By using tools such as Graphviz, DOT graphs can be converted into
--   images.
syntaxToDOT :: SyntaxGraph -> Text

module Language.Piet
data PietError
PietImageReaderError :: ImageReaderError -> PietError
PietParserError :: ParserError -> PietError
PietObjectGeneratorError :: ObjectGeneratorError -> PietError
data PietStep
StepReadImage :: PietStep
StepParse :: PietStep
StepMakeAssembly :: PietStep
StepGenerateExecutable :: PietStep
StepRunJIT :: PietStep
StepGenerateDOT :: PietStep

-- | Compile a Piet program.
compile :: (MonadIO m, MonadError PietError m) => (PietStep -> m ()) -> ImageConfig -> OptimizationLevel -> FilePath -> FilePath -> m ()

-- | Run a Piet program on JIT.
run :: (MonadIO m, MonadError PietError m) => (PietStep -> m ()) -> ImageConfig -> OptimizationLevel -> FilePath -> m ()

-- | Convert a Piet program to a graph script.
graphText :: (MonadIO m, MonadError PietError m) => (PietStep -> m ()) -> ImageConfig -> FilePath -> m Text
nullReceiver :: Monad m => PietStep -> m ()

-- | The optimization level to optimize assembly code.
data OptimizationLevel

-- | <ul>
--   <li>O0</li>
--   </ul>
NoOptimization :: OptimizationLevel

-- | <ul>
--   <li>O1</li>
--   </ul>
OptimizationLevelLow :: OptimizationLevel

-- | <ul>
--   <li>O2</li>
--   </ul>
OptimizationLevelMiddle :: OptimizationLevel

-- | <ul>
--   <li>O3</li>
--   </ul>
OptimizationLevelHigh :: OptimizationLevel

-- | <ul>
--   <li>Os</li>
--   </ul>
SizeLevelLow :: OptimizationLevel

-- | <ul>
--   <li>Oz</li>
--   </ul>
SizeLevelHigh :: OptimizationLevel
data ImageReaderError

-- | The image file is unreadable.
ReadImageFileError :: String -> ImageReaderError

-- | The input image has an unsupported format.
UnsupportedImageError :: String -> ImageReaderError

-- | The specified size of codel is not fit for the image.
CodelSizeError :: ImageReaderError

-- | This type is to determine how to deal with additional colors such as
--   orange, gray, etc.
data AdditionalColorStrategy

-- | Treating as a white codel.
AdditionalColorAsWhite :: AdditionalColorStrategy

-- | Treating as a black codel.
AdditionalColorAsBlack :: AdditionalColorStrategy

-- | Treating as a codel which has the nearest color.
AdditionalColorNearest :: AdditionalColorStrategy

-- | This type is to determine how to deal with multicolored codels.
data MulticoloredCodelStrategy

-- | Treating as a white codel.
MulticoloredCodelAsWhite :: MulticoloredCodelStrategy

-- | Treating as a black codel.
MulticoloredCodelAsBlack :: MulticoloredCodelStrategy

-- | Picking up a center pixel.
MulticoloredCodelCenter :: MulticoloredCodelStrategy

-- | Finding the modal color, the most frequent color.
MulticoloredCodelModal :: MulticoloredCodelStrategy

-- | Calculating an average color.
MulticoloredCodelAverage :: MulticoloredCodelStrategy
data ImageConfig
ImageConfig :: AdditionalColorStrategy -> MulticoloredCodelStrategy -> CodelSize -> ImageConfig
[additionalColor] :: ImageConfig -> AdditionalColorStrategy
[multicoloredCodel] :: ImageConfig -> MulticoloredCodelStrategy
[codelSize] :: ImageConfig -> CodelSize
data CodelSize
CodelSize :: Int -> CodelSize
GuessCodelSize :: CodelSize
data ObjectGeneratorError

-- | Failed to compile.
CompileError :: String -> ObjectGeneratorError

-- | Failed to link object.
LinkError :: String -> ObjectGeneratorError

-- | Failed to create a temporary file.
TempFileError :: String -> ObjectGeneratorError
data ParserError

-- | The block table is empty.
EmptyBlockTableError :: ParserError

-- | The initial codel of the block table is black.
IllegalInitialColorError :: ParserError

-- | A codel index in the codel table is missing.
MissingCodelIndexError :: Int -> ParserError
instance GHC.Classes.Eq Language.Piet.PietStep
instance GHC.Show.Show Language.Piet.PietStep
instance GHC.Classes.Eq Language.Piet.PietError
instance GHC.Show.Show Language.Piet.PietError
